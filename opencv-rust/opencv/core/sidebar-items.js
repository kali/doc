initSidebarItems({"constant":[["CMP_EQ",""],["CMP_GE",""],["CMP_GT",""],["CMP_LE",""],["CMP_LT",""],["CMP_NE",""],["COVAR_COLS",""],["COVAR_NORMAL",""],["COVAR_ROWS",""],["COVAR_SCALE",""],["COVAR_SCRAMBLED",""],["COVAR_USE_AVG",""],["CV_16S",""],["CV_16SC1",""],["CV_16SC2",""],["CV_16SC3",""],["CV_16SC4",""],["CV_16U",""],["CV_16UC1",""],["CV_16UC2",""],["CV_16UC3",""],["CV_16UC4",""],["CV_32F",""],["CV_32FC1",""],["CV_32FC2",""],["CV_32FC3",""],["CV_32FC4",""],["CV_32S",""],["CV_32SC1",""],["CV_32SC2",""],["CV_32SC3",""],["CV_32SC4",""],["CV_64F",""],["CV_64FC1",""],["CV_64FC2",""],["CV_64FC3",""],["CV_64FC4",""],["CV_8S",""],["CV_8SC1",""],["CV_8SC2",""],["CV_8SC3",""],["CV_8SC4",""],["CV_8U",""],["CV_8UC1",""],["CV_8UC2",""],["CV_8UC3",""],["CV_8UC4",""],["CV_AUTO_STEP",""],["CV_BadAlign",""],["CV_BadAlphaChannel",""],["CV_BadCOI",""],["CV_BadCallBack",""],["CV_BadDataPtr",""],["CV_BadDepth",""],["CV_BadImageSize",""],["CV_BadModelOrChSeq",""],["CV_BadNumChannel1U",""],["CV_BadNumChannels",""],["CV_BadOffset",""],["CV_BadOrder",""],["CV_BadOrigin",""],["CV_BadROISize",""],["CV_BadStep",""],["CV_BadTileSize",""],["CV_CN_MAX",""],["CV_CN_SHIFT",""],["CV_DEPTH_MAX",""],["CV_GRAPH",""],["CV_GRAPH_FLAG_ORIENTED",""],["CV_GpuApiCallError",""],["CV_GpuNotSupported",""],["CV_HIST_ARRAY",""],["CV_HIST_MAGIC_VAL",""],["CV_HIST_RANGES_FLAG",""],["CV_HIST_SPARSE",""],["CV_HIST_TREE",""],["CV_HIST_UNIFORM",""],["CV_HIST_UNIFORM_FLAG",""],["CV_HeaderIsNull",""],["CV_MAGIC_MASK",""],["CV_MATND_MAGIC_VAL",""],["CV_MAT_CN_MASK",""],["CV_MAT_CONT_FLAG",""],["CV_MAT_CONT_FLAG_SHIFT",""],["CV_MAT_DEPTH_MASK",""],["CV_MAT_MAGIC_VAL",""],["CV_MAT_TYPE_MASK",""],["CV_MAX_DIM",""],["CV_MAX_DIM_HEAP",""],["CV_MaskIsTiled",""],["CV_NODE_EMPTY",""],["CV_NODE_FLOAT",""],["CV_NODE_FLOW",""],["CV_NODE_INT",""],["CV_NODE_INTEGER",""],["CV_NODE_MAP",""],["CV_NODE_NAMED",""],["CV_NODE_NONE",""],["CV_NODE_REAL",""],["CV_NODE_REF",""],["CV_NODE_SEQ",""],["CV_NODE_SEQ_SIMPLE",""],["CV_NODE_STR",""],["CV_NODE_STRING",""],["CV_NODE_TYPE_MASK",""],["CV_NODE_USER",""],["CV_ORIENTED_GRAPH",""],["CV_OpenCLDoubleNotSupported",""],["CV_OpenCLInitError",""],["CV_OpenCLNoAMDBlasFft",""],["CV_OpenGlApiCallError",""],["CV_OpenGlNotSupported",""],["CV_SEQ_CHAIN",""],["CV_SEQ_CHAIN_CONTOUR",""],["CV_SEQ_CONNECTED_COMP",""],["CV_SEQ_CONTOUR",""],["CV_SEQ_ELTYPE_BITS",""],["CV_SEQ_ELTYPE_CODE",""],["CV_SEQ_ELTYPE_CONNECTED_COMP",""],["CV_SEQ_ELTYPE_GENERIC",""],["CV_SEQ_ELTYPE_GRAPH_EDGE",""],["CV_SEQ_ELTYPE_GRAPH_VERTEX",""],["CV_SEQ_ELTYPE_INDEX",""],["CV_SEQ_ELTYPE_MASK",""],["CV_SEQ_ELTYPE_POINT",""],["CV_SEQ_ELTYPE_POINT3D",""],["CV_SEQ_ELTYPE_PPOINT",""],["CV_SEQ_ELTYPE_PTR",""],["CV_SEQ_ELTYPE_TRIAN_ATR",""],["CV_SEQ_FLAG_CLOSED",""],["CV_SEQ_FLAG_CONVEX",""],["CV_SEQ_FLAG_HOLE",""],["CV_SEQ_FLAG_SHIFT",""],["CV_SEQ_FLAG_SIMPLE",""],["CV_SEQ_INDEX",""],["CV_SEQ_KIND_BIN_TREE",""],["CV_SEQ_KIND_BITS",""],["CV_SEQ_KIND_CURVE",""],["CV_SEQ_KIND_GENERIC",""],["CV_SEQ_KIND_GRAPH",""],["CV_SEQ_KIND_MASK",""],["CV_SEQ_KIND_SUBDIV2D",""],["CV_SEQ_MAGIC_VAL",""],["CV_SEQ_POINT3D_SET",""],["CV_SEQ_POINT_SET",""],["CV_SEQ_POLYGON",""],["CV_SEQ_POLYGON_TREE",""],["CV_SEQ_POLYLINE",""],["CV_SEQ_SIMPLE_POLYGON",""],["CV_SET_ELEM_IDX_MASK",""],["CV_SET_MAGIC_VAL",""],["CV_SPARSE_MAT_MAGIC_VAL",""],["CV_STORAGE_APPEND",""],["CV_STORAGE_FORMAT_AUTO",""],["CV_STORAGE_FORMAT_MASK",""],["CV_STORAGE_FORMAT_XML",""],["CV_STORAGE_FORMAT_YAML",""],["CV_STORAGE_MAGIC_VAL",""],["CV_STORAGE_MEMORY",""],["CV_STORAGE_READ",""],["CV_STORAGE_WRITE",""],["CV_STORAGE_WRITE_BINARY",""],["CV_STORAGE_WRITE_TEXT",""],["CV_SUBMAT_FLAG",""],["CV_SUBMAT_FLAG_SHIFT",""],["CV_StsAssert",""],["CV_StsAutoTrace",""],["CV_StsBackTrace",""],["CV_StsBadArg",""],["CV_StsBadFlag",""],["CV_StsBadFunc",""],["CV_StsBadMask",""],["CV_StsBadMemBlock",""],["CV_StsBadPoint",""],["CV_StsBadSize",""],["CV_StsDivByZero",""],["CV_StsError",""],["CV_StsFilterOffsetErr",""],["CV_StsFilterStructContentErr",""],["CV_StsInplaceNotSupported",""],["CV_StsInternal",""],["CV_StsKernelStructContentErr",""],["CV_StsNoConv",""],["CV_StsNoMem",""],["CV_StsNotImplemented",""],["CV_StsNullPtr",""],["CV_StsObjectNotFound",""],["CV_StsOk",""],["CV_StsOutOfRange",""],["CV_StsParseError",""],["CV_StsUnmatchedFormats",""],["CV_StsUnmatchedSizes",""],["CV_StsUnsupportedFormat",""],["CV_StsVecLengthErr",""],["CV_TERMCRIT_EPS",""],["CV_TERMCRIT_ITER",""],["CV_TERMCRIT_NUMBER",""],["CV_TYPE_NAME_GRAPH",""],["CV_TYPE_NAME_MAT",""],["CV_TYPE_NAME_MATND",""],["CV_TYPE_NAME_SEQ",""],["CV_TYPE_NAME_SEQ_TREE",""],["CV_TYPE_NAME_SPARSE_MAT",""],["CV_USRTYPE1",""],["DCT_INVERSE",""],["DCT_ROWS",""],["DECOMP_CHOLESKY",""],["DECOMP_EIG",""],["DECOMP_LU",""],["DECOMP_NORMAL",""],["DECOMP_QR",""],["DECOMP_SVD",""],["DEPTH_MASK",""],["DEPTH_MASK_16S",""],["DEPTH_MASK_16U",""],["DEPTH_MASK_32F",""],["DEPTH_MASK_32S",""],["DEPTH_MASK_64F",""],["DEPTH_MASK_8S",""],["DEPTH_MASK_8U",""],["DEPTH_MASK_ALL",""],["DEPTH_MASK_ALL_BUT_8S",""],["DEPTH_MASK_FLT",""],["DFT_COMPLEX_OUTPUT",""],["DFT_INVERSE",""],["DFT_REAL_OUTPUT",""],["DFT_ROWS",""],["DFT_SCALE",""],["FONT_HERSHEY_COMPLEX",""],["FONT_HERSHEY_COMPLEX_SMALL",""],["FONT_HERSHEY_DUPLEX",""],["FONT_HERSHEY_PLAIN",""],["FONT_HERSHEY_SCRIPT_COMPLEX",""],["FONT_HERSHEY_SCRIPT_SIMPLEX",""],["FONT_HERSHEY_SIMPLEX",""],["FONT_HERSHEY_TRIPLEX",""],["FONT_ITALIC",""],["FileNode_EMPTY",""],["FileNode_FLOAT",""],["FileNode_FLOW",""],["FileNode_INT",""],["FileNode_MAP",""],["FileNode_NAMED",""],["FileNode_REAL",""],["FileNode_REF",""],["FileNode_SEQ",""],["FileNode_STR",""],["FileNode_STRING",""],["FileNode_USER",""],["FileStorage_APPEND",""],["FileStorage_FORMAT_AUTO",""],["FileStorage_FORMAT_MASK",""],["FileStorage_FORMAT_XML",""],["FileStorage_FORMAT_YAML",""],["FileStorage_INSIDE_MAP",""],["FileStorage_MEMORY",""],["FileStorage_NAME_EXPECTED",""],["FileStorage_READ",""],["FileStorage_UNDEFINED",""],["FileStorage_VALUE_EXPECTED",""],["FileStorage_WRITE",""],["GEMM_1_T",""],["GEMM_2_T",""],["GEMM_3_T",""],["IPL_ALIGN_16BYTES",""],["IPL_ALIGN_32BYTES",""],["IPL_ALIGN_4BYTES",""],["IPL_ALIGN_8BYTES",""],["IPL_ALIGN_DWORD",""],["IPL_ALIGN_QWORD",""],["IPL_BORDER_CONSTANT",""],["IPL_BORDER_REFLECT",""],["IPL_BORDER_REFLECT_101",""],["IPL_BORDER_REPLICATE",""],["IPL_BORDER_TRANSPARENT",""],["IPL_BORDER_WRAP",""],["IPL_DATA_ORDER_PIXEL",""],["IPL_DATA_ORDER_PLANE",""],["IPL_DEPTH_16S",""],["IPL_DEPTH_16U",""],["IPL_DEPTH_1U",""],["IPL_DEPTH_32F",""],["IPL_DEPTH_32S",""],["IPL_DEPTH_64F",""],["IPL_DEPTH_8S",""],["IPL_DEPTH_8U",""],["IPL_DEPTH_SIGN",""],["IPL_IMAGE_DATA",""],["IPL_IMAGE_HEADER",""],["IPL_IMAGE_ROI",""],["IPL_ORIGIN_BL",""],["IPL_ORIGIN_TL",""],["KMEANS_PP_CENTERS",""],["KMEANS_RANDOM_CENTERS",""],["KMEANS_USE_INITIAL_LABELS",""],["MAGIC_MASK",""],["Mat_AUTO_STEP",""],["Mat_CONTINUOUS_FLAG",""],["Mat_MAGIC_VAL",""],["Mat_SUBMATRIX_FLAG",""],["NORM_HAMMING",""],["NORM_HAMMING2",""],["NORM_INF",""],["NORM_L1",""],["NORM_L2",""],["NORM_L2SQR",""],["NORM_MINMAX",""],["NORM_RELATIVE",""],["NORM_TYPE_MASK",""],["Param_ALGORITHM",""],["Param_BOOLEAN",""],["Param_MAT_VECTOR",""],["Param_SHORT",""],["Param_UCHAR",""],["Param_UINT64",""],["Param_UNSIGNED_INT",""],["RNG_NORMAL",""],["RNG_UNIFORM",""],["SORT_ASCENDING",""],["SORT_DESCENDING",""],["SORT_EVERY_COLUMN",""],["SORT_EVERY_ROW",""],["SVD_FULL_UV",""],["SVD_MODIFY_A",""],["SVD_NO_UV",""],["SparseMat_HASH_BIT",""],["SparseMat_HASH_SCALE",""],["SparseMat_MAX_DIM",""],["TYPE_MASK",""],["TermCriteria_COUNT",""],["TermCriteria_EPS",""],["TermCriteria_MAX_ITER",""],["_InputArray_EXPR",""],["_InputArray_FIXED_SIZE",""],["_InputArray_FIXED_TYPE",""],["_InputArray_GPU_MAT",""],["_InputArray_KIND_MASK",""],["_InputArray_KIND_SHIFT",""],["_InputArray_MAT",""],["_InputArray_MATX",""],["_InputArray_NONE",""],["_InputArray_OCL_MAT",""],["_InputArray_OPENGL_BUFFER",""],["_InputArray_OPENGL_TEXTURE",""],["_InputArray_STD_VECTOR",""],["_InputArray_STD_VECTOR_MAT",""],["_InputArray_STD_VECTOR_VECTOR",""]],"fn":[["absdiff","computes element-wise absolute difference of two arrays (dst = abs(src1 - src2))"],["add","adds one matrix to another (dst = src1 + src2)"],["add_weighted","computes weighted sum of two arrays (dst = alpha*src1 + beta*src2 + gamma)"],["align_size","Aligns buffer size by the certain number of bytes"],["arrowed_line","draws an arrow from pt1 to pt2 in the image"],["batch_distance","naive nearest neighbor finder"],["bitwise_and","computes bitwise conjunction of the two arrays (dst = src1 & src2)"],["bitwise_not","inverts each bit of array (dst = ~src)"],["bitwise_or","computes bitwise disjunction of the two arrays (dst = src1 | src2)"],["bitwise_xor","computes bitwise exclusive-or of the two arrays (dst = src1 ^ src2)"],["calc_covar_matrix","computes covariation matrix of a set of samples"],["cart_to_polar","converts Cartesian coordinates to polar"],["check_hardware_support","Returns SSE etc. support status"],["circle","draws the circle outline or a solid circle in the image"],["clip_line","clips the line segment by the rectangle imgRect"],["clip_line_size","clips the line segment by the rectangle Rect(0, 0, imgSize.width, imgSize.height)"],["compare","compares elements of two arrays (dst = src1 <cmpop> src2)"],["convert_scale_abs","scales array elements, computes absolute values and converts the results to 8-bit unsigned integers: dst(i)=saturate_cast<uchar>abs(src(i)*alpha+beta)"],["count_non_zero","computes the number of nonzero array elements"],["cube_root","computes cube root of the argument"],["cv_ceil",""],["cv_floor",""],["cv_ipl_depth",""],["cv_is_inf",""],["cv_is_na_n",""],["cv_rng",""],["cv_round",""],["dct","performs forward or inverse 1D or 2D Discrete Cosine Transformation"],["determinant","computes determinant of a square matrix"],["dft","performs forward or inverse 1D or 2D Discrete Fourier Transformation"],["divide","computes element-wise weighted reciprocal of an array (dst = scale/src2)"],["divide_mat","computes element-wise weighted quotient of the two arrays (dst = scale*src1/src2)"],["eigen",""],["eigen_indexes","finds eigenvalues of a symmetric matrix"],["eigen_vectors","finds eigenvalues and eigenvectors of a symmetric matrix"],["ellipse","draws an elliptic arc, ellipse sector or a rotated ellipse in the image"],["ellipse2_poly","converts elliptic arc to a polygonal curve"],["ellipse_new_rotated_rect","draws a rotated ellipse in the image"],["exp","computes exponent of each matrix element (dst = e**src)"],["extract_channel","extracts a single channel from src (coi is 0-based index)"],["fast_atan2","computes the angle in degrees (0..360) of the vector (x,y)"],["find_non_zero","returns the list of locations of non-zero pixels"],["flip","reverses the order of the rows, columns or both in a matrix"],["gemm","implements generalized matrix product algorithm GEMM from BLAS"],["get_build_information",""],["get_cpu_tick_count","Returns the number of CPU ticks."],["get_elem_size",""],["get_num_threads",""],["get_number_of_cp_us","returns the number of CPUs (including hyper-threading)"],["get_optimal_dft_size","computes the minimal vector size vecsize1 >= vecsize so that the dft() of the vector of length vecsize1 can be computed efficiently"],["get_thread_num",""],["get_tick_count","The function returns the number of ticks since the certain event (e.g. when the machine was turned on). It can be used to initialize cv::RNG or to measure a function execution time by reading the tick count before and after the function call. The granularity of ticks depends on the hardware and OS used. Use cv::getTickFrequency() to convert ticks to seconds."],["get_tick_frequency","Returns the number of ticks per seconds."],["hconcat",""],["idct","performs inverse 1D or 2D Discrete Cosine Transformation"],["idft","performs inverse 1D or 2D Discrete Fourier Transformation"],["in_range","set mask elements for those array elements which are within the element-specific bounding box (dst = lowerb <= src && src < upperb)"],["invert","computes inverse or pseudo-inverse matrix"],["line","draws the line segment (pt1, pt2) in the image"],["log","computes natural logarithm of absolute value of each matrix element: dst = log(abs(src))"],["lut","transforms array of numbers using a lookup table: dst(i)=lut(src(i))"],["magnitude","computes magnitude (magnitude(i)) of each (x(i), y(i)) vector"],["mahalanobis","computes Mahalanobis distance between two vectors: sqrt((v1-v2)'*icovar*(v1-v2)), where icovar is the inverse covariation matrix"],["mahalonobis","a synonym for Mahalanobis"],["max","computes per-element maximum of two arrays (dst = max(src1, src2))"],["max_mat","computes per-element maximum of array and scalar (dst = max(src1, src2))"],["max_mat_mat","computes per-element maximum of two arrays (dst = max(src1, src2))"],["mean","computes mean value of selected array elements"],["mean_std_dev","computes mean value and standard deviation of all or selected array elements"],["merge",""],["min","computes per-element minimum of two arrays (dst = min(src1, src2))"],["min_mat","computes per-element minimum of array and scalar (dst = min(src1, src2))"],["min_mat_mat","computes per-element minimum of two arrays (dst = min(src1, src2))"],["mul_spectrums","computes element-wise product of the two Fourier spectrums. The second spectrum can optionally be conjugated before the multiplication"],["mul_transposed","multiplies matrix by its transposition from the left or from the right"],["multiply","computes element-wise weighted product of the two arrays (dst = scale*src1*src2)"],["norm","computes norm of the selected array part"],["norm_with_type","computes norm of selected part of the difference between two arrays"],["normalize","scales and shifts array elements so that either the specified norm (alpha) or the minimum (alpha) and maximum (beta) array values get the specified values"],["parallel_for_",""],["pca_back_project",""],["pca_project",""],["perspective_transform","performs perspective transformation of each element of multi-channel input matrix"],["phase","computes angle (angle(i)) of each (x(i), y(i)) vector"],["polar_to_cart","converts polar coordinates to Cartesian"],["pow","raises the input matrix elements to the specified power (b = a**power)"],["put_text","renders text string in the image"],["rectangle","draws the rectangle outline or a solid rectangle covering rec in the image"],["rectangle_points","draws the rectangle outline or a solid rectangle with the opposite corners pt1 and pt2 in the image"],["reduce","transforms 2D matrix to 1D row or column vector by taking sum, minimum, maximum or mean value over all the rows"],["repeat",""],["repeat_to","replicates the input matrix the specified number of times in the horizontal and/or vertical direction"],["scale_add","adds scaled array to another one (dst = alpha*src1 + src2)"],["set_break_on_error","When the break-on-error mode is set, the default error handler issues a hardware exception, which can make debugging more convenient."],["set_num_threads",""],["set_use_optimized","Turns on/off available optimization"],["solve","solves linear system or a least-square problem"],["solve_cubic","finds real roots of a cubic polynomial"],["solve_poly","finds real and complex roots of a polynomial"],["sort","sorts independently each matrix row or each matrix column"],["sort_idx","sorts independently each matrix row or each matrix column"],["split",""],["split_at","copies each plane of a multi-channel array to a dedicated array"],["sqrt","computes square root of each matrix element (dst = src**0.5)"],["subtract","subtracts one matrix from another (dst = src1 - src2)"],["sum","computes sum of array elements"],["sv_back_subst","performs back substitution for the previously computed SVD"],["sv_decomp","computes SVD of src"],["swap","swaps two matrices"],["trace","computes trace of a matrix"],["transform","performs affine transformation of each element of multi-channel input matrix"],["transpose","transposes the matrix"],["use_optimized","Returns the current optimization status"],["vconcat",""]],"struct":[["AutoLock",""],["CvRNG",""],["LineIterator",""],["Mat",""],["Matx_AddOp",""],["Matx_MatMulOp",""],["Matx_MulOp",""],["Matx_ScaleOp",""],["Matx_SubOp",""],["Matx_TOp",""],["NAryMatIterator",""],["PCA",""],["Point",""],["Point2d",""],["Point2f",""],["Range",""],["Rect",""],["RotatedRect",""],["Scalar",""],["Size",""],["Size2f",""],["TermCriteria",""],["Vec2b",""],["Vec2d",""],["Vec2f",""],["Vec2i",""],["Vec2s",""],["Vec3b",""],["Vec3d",""],["Vec3f",""],["Vec3i",""],["Vec3s",""],["Vec4b",""],["Vec4d",""],["Vec4f",""],["Vec4i",""],["Vec4s",""],["Vec6b",""],["Vec6d",""],["Vec6f",""],["Vec6i",""],["Vec6s",""]],"trait":[["Algorithm",""],["ParallelLoopBody",""]]});