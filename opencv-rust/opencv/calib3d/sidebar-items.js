initSidebarItems({"constant":[["CALC_J",""],["CALIB_CB_ADAPTIVE_THRESH",""],["CALIB_CB_ASYMMETRIC_GRID",""],["CALIB_CB_CLUSTERING",""],["CALIB_CB_FAST_CHECK",""],["CALIB_CB_FILTER_QUADS",""],["CALIB_CB_NORMALIZE_IMAGE",""],["CALIB_CB_SYMMETRIC_GRID",""],["CALIB_FIX_ASPECT_RATIO",""],["CALIB_FIX_FOCAL_LENGTH",""],["CALIB_FIX_INTRINSIC",""],["CALIB_FIX_K1",""],["CALIB_FIX_K2",""],["CALIB_FIX_K3",""],["CALIB_FIX_K4",""],["CALIB_FIX_K5",""],["CALIB_FIX_K6",""],["CALIB_FIX_PRINCIPAL_POINT",""],["CALIB_RATIONAL_MODEL",""],["CALIB_SAME_FOCAL_LENGTH",""],["CALIB_USE_INTRINSIC_GUESS",""],["CALIB_ZERO_DISPARITY",""],["CALIB_ZERO_TANGENT_DIST",""],["CHECK_ERR",""],["CV_CALIB_CB_ADAPTIVE_THRESH",""],["CV_CALIB_CB_FAST_CHECK",""],["CV_CALIB_CB_FILTER_QUADS",""],["CV_CALIB_CB_NORMALIZE_IMAGE",""],["CV_CALIB_FIX_ASPECT_RATIO",""],["CV_CALIB_FIX_FOCAL_LENGTH",""],["CV_CALIB_FIX_INTRINSIC",""],["CV_CALIB_FIX_K1",""],["CV_CALIB_FIX_K2",""],["CV_CALIB_FIX_K3",""],["CV_CALIB_FIX_K4",""],["CV_CALIB_FIX_K5",""],["CV_CALIB_FIX_K6",""],["CV_CALIB_FIX_PRINCIPAL_POINT",""],["CV_CALIB_RATIONAL_MODEL",""],["CV_CALIB_SAME_FOCAL_LENGTH",""],["CV_CALIB_USE_INTRINSIC_GUESS",""],["CV_CALIB_ZERO_DISPARITY",""],["CV_CALIB_ZERO_TANGENT_DIST",""],["CV_EPNP",""],["CV_FM_7POINT",""],["CV_FM_8POINT",""],["CV_FM_LMEDS",""],["CV_FM_LMEDS_ONLY",""],["CV_FM_RANSAC",""],["CV_FM_RANSAC_ONLY",""],["CV_ITERATIVE",""],["CV_LMEDS",""],["CV_P3P",""],["CV_RANSAC",""],["CV_STEREO_BM_BASIC",""],["CV_STEREO_BM_FISH_EYE",""],["CV_STEREO_BM_NARROW",""],["CV_STEREO_BM_NORMALIZED_RESPONSE",""],["CV_STEREO_BM_XSOBEL",""],["DONE",""],["EPNP",""],["FM_7POINT",""],["FM_8POINT",""],["FM_LMEDS",""],["FM_RANSAC",""],["ITERATIVE",""],["LMEDS",""],["P3P",""],["RANSAC",""],["STARTED",""],["StereoBM_BASIC_PRESET",""],["StereoBM_FISH_EYE_PRESET",""],["StereoBM_NARROW_PRESET",""],["StereoBM_PREFILTER_NORMALIZED_RESPONSE",""],["StereoBM_PREFILTER_XSOBEL",""],["StereoSGBM_DISP_SCALE",""],["StereoSGBM_DISP_SHIFT",""],["fisheye_CALIB_CHECK_COND",""],["fisheye_CALIB_FIX_SKEW",""],["fisheye_CALIB_RECOMPUTE_EXTRINSIC",""]],"fn":[["calibration_matrix_values","computes several useful camera characteristics from the camera matrix, camera frame resolution and the physical sensor size."],["compose_rt","composes 2 [R|t] transformations together. Also computes the derivatives of the result w.r.t the arguments"],["compute_correspond_epilines","finds coordinates of epipolar lines corresponding the specified points"],["convert_points_from_homogeneous","converts point coordinates from homogeneous to normal pixel coordinates ((x,y,z)->(x/z, y/z))"],["convert_points_homogeneous","for backward compatibility"],["convert_points_to_homogeneous","converts point coordinates from normal pixel coordinates to homogeneous coordinates ((x,y)->(x,y,1))"],["correct_matches",""],["cv_ransac_update_num_iters",""],["decompose_projection_matrix","Decomposes the projection matrix into camera matrix and the rotation martix and the translation vector"],["distort_points","distorts 2D points using fisheye model"],["estimate_affine3_d",""],["find_chessboard_corners","finds checkerboard pattern of the specified size in the image"],["find_circles_grid_default","the deprecated function. Use findCirclesGrid() instead of it."],["find_fundamental_mat","variant of findFundamentalMat for backward compatibility"],["find_homography","variant of findHomography for backward compatibility"],["find_homography_1","computes the best-fit perspective transformation mapping srcPoints to dstPoints."],["fisheye_project_points","projects points using fisheye model"],["fisheye_undistort_image","undistorts image, optionally changes resolution and camera matrix. If Knew zero identity matrix is used"],["fisheye_undistort_points","undistorts 2D points using fisheye model"],["get_valid_disparity_roi","computes valid disparity ROI from the valid ROIs of the rectified images (that are returned by cv::stereoRectify())"],["mat_mul_deriv","computes derivatives of the matrix product w.r.t each of the multiplied matrix coefficients"],["project_points","projects points from the model coordinate space to the image coordinates. Also computes derivatives of the image coordinates w.r.t the intrinsic and extrinsic camera parameters"],["reproject_image_to3_d","reprojects disparity image to 3D: (x,y,d)->(X,Y,Z) using the matrix Q returned by cv::stereoRectify"],["rodrigues","converts rotation vector to rotation matrix or vice versa using Rodrigues transformation"],["rq_decomp3x3","Computes RQ decomposition of 3x3 matrix"],["solve_pn_p",""],["solve_pn_p_ransac","computes the camera pose from a few 3D points and the corresponding projections. The outliers are possible."],["stereo_rectify_uncalibrated","computes the rectification transformation for an uncalibrated stereo camera (zero distortion is assumed)"],["triangulate_points",""]],"struct":[["StereoBM",""],["StereoSGBM",""]]});